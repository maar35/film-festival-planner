// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using AppKit;
using CoreGraphics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using static System.Environment;
using System.Net;
using System.Threading.Tasks;

namespace PresentScreenings.TableView
{
    public partial class DownloadFilmInfoController : NSViewController
    {
        #region Constants
        private const float _xMargin = 20;
        private const float _xBetweenControls = 12;
        private const float _buttonWidth = 94;
        private const float _yMargin = 12;
        private const float _yBetweenViews = 12;
        private const float _yBetweenLabels = 2;
        private const float _labelHeight = 19;
        private const float _buttonHeight = 32;
        private const string _enterKey = "\r";
        private static string _nl = NewLine;
        private const string _dateTimeFormat = "yyyy-MM-dd HH:mm:ss";
        #endregion

        #region Private Variables
        private float _contentWidth;
        private float _yCurr;
        private NSTextField _progressLabel;
        private NSTextField _activityField;
        private NSScrollView _activityScrollView;
        private NSButton _startButton;
        private NSButton _allFilmsButton;
        private NSButton _cancelButton;
        private List<Film> _films;
        private List<Film> _filmsWithoutInfo;
        #endregion

        #region Application Access
        public static AppDelegate App => (AppDelegate)NSApplication.SharedApplication.Delegate;
        #endregion

        #region Properties
        public FilmRatingDialogController Presentor;
        #endregion

        #region Constructors
        public DownloadFilmInfoController(IntPtr handle) : base(handle)
        {
            _filmsWithoutInfo = new List<Film>();
        }
        #endregion

        #region Override Methods
        public override void AwakeFromNib()
        {
            base.AwakeFromNib();
            //Presentor = App.Controller;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Get the selected films.
            var indexes = Presentor.FilmRatingTableView.SelectedRows.ToList();
            _films = new List<Film>(indexes.Select(i => Presentor.GetFilmByIndex(i)));
            _filmsWithoutInfo = _films.Where(f => !ScreeningsPlan.FilmInfos.Select(fi => fi.FilmId).Contains(f.FilmId)).ToList();

            // Set generally usable dimensions.
            var frame = View.Frame;
            _contentWidth = (float)frame.Width - 2 * _xMargin;
            _yCurr = (float)frame.Height;

            // Create the info labels.
            _yCurr -= _yMargin;
            CreateInfoLabels(ref _yCurr);

            //Create the activity scroll view.
            _yCurr -= _yBetweenViews;
            CreateActivityScrollView(ref _yCurr, _yCurr - _yMargin - _buttonHeight - _yBetweenViews);

            // Create the buttons at the bottom of the view.
            _yCurr = _yMargin + _buttonHeight;
            CreateActionButtons(ref _yCurr);
        }

        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate that we're alive.
            App.DownloadFilmInfoController = this;
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate that we're gone.
            App.DownloadFilmInfoController = null;
        }
        #endregion

        #region Private Methods
        private void CreateInfoLabels(ref float yCurr)
        {
            // Create the selected films count label.
            yCurr -= _labelHeight;
            var selectedCountRect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            var selectedCountLabel = Presentor.CreateStandardLabel(selectedCountRect);
            selectedCountLabel.StringValue = $"Selected films: {_films.Count}";
            View.AddSubview(selectedCountLabel);

            // Create the films without info count label.
            yCurr -= _yBetweenLabels + _labelHeight;
            var withoutInfoRect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            var withoutInfoLabel = Presentor.CreateStandardLabel(withoutInfoRect);
            withoutInfoLabel.StringValue = $"Without info: {_filmsWithoutInfo.Count}";
            View.AddSubview(withoutInfoLabel);

            //Create the progress label.
            yCurr -= _yBetweenLabels + _labelHeight;
            var progressRect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            _progressLabel = Presentor.CreateStandardLabel(progressRect);
            SetProgressLabelStringValue();
            View.AddSubview(_progressLabel);
        }

        private void SetProgressLabelStringValue()
        {
            var processedCount = _filmsWithoutInfo.Count(f => f.InfoStatus != Film.FilmInfoStatus.Absent);
            var completeCount = _filmsWithoutInfo.Count(f => f.InfoStatus == Film.FilmInfoStatus.Complete);
            var urlErrorCount = _filmsWithoutInfo.Count(f => f.InfoStatus == Film.FilmInfoStatus.UrlError);
            var parseErrorCount = _filmsWithoutInfo.Count(f => f.InfoStatus == Film.FilmInfoStatus.ParseError);
            _progressLabel.StringValue = $"{processedCount} Processed, {completeCount} Success, {urlErrorCount} URL error, {parseErrorCount} Parse error";
        }

        private void CreateActivityScrollView(ref float yCurr, float height)
        {
            _yCurr -= height;
            var docRect = new CGRect(0, 0, _contentWidth, height);
            _activityField = new NSTextField(docRect);
            _activityField.Editable = false;
            _activityField.StringValue = ToDoFilmsString();
            _activityField.CanDrawConcurrently = true;
            var fit = _activityField.SizeThatFits(_activityField.Frame.Size);
            _activityField.SetFrameSize(fit);

            var rect = new CGRect(_xMargin, yCurr, _contentWidth, height);
            _activityScrollView = Presentor.CreateStandardScrollView(rect, _activityField);
            View.AddSubview(_activityScrollView);
        }

        private string ToDoFilmsString()
        {
            var builder = new StringBuilder("To do:" + NewLine + NewLine);
            foreach (Film film in _filmsWithoutInfo)
            {
                builder.AppendLine($"{film.ToString()}, {film.InfoStatus.ToString()}");
            }
            return builder.ToString();
        }

        private void CreateActionButtons(ref float yCurr)
        {
            var xCurr = _xMargin;
            yCurr -= _buttonHeight;
            var visitCount = _filmsWithoutInfo.Count;

            // Create the Start button.
            var startButtonRect = new CGRect(xCurr, yCurr, _buttonWidth + 10, _buttonHeight);
            _startButton = Presentor.CreateStandardButton(startButtonRect);
            _startButton.Title = $"Visit {visitCount} sites";
            _startButton.LineBreakMode = NSLineBreakMode.ByWordWrapping;
            _startButton.KeyEquivalent = _enterKey;
            _startButton.Enabled = visitCount > 0;
            _startButton.Action = new ObjCRuntime.Selector("DownloadFilmInfo:");
            View.AddSubview(_startButton);
            xCurr += (float)_startButton.Frame.Width + _xBetweenControls;

            // Create the All Films button.
            var allFilmsButtonRect = new CGRect(xCurr, yCurr, _buttonWidth, _buttonHeight);
            _allFilmsButton = Presentor.CreateStandardButton(allFilmsButtonRect);
            _allFilmsButton.Title = "All films";
            _allFilmsButton.Enabled = false;
            _allFilmsButton.Action = new ObjCRuntime.Selector("VisitAllFilms:");
            View.AddSubview(_allFilmsButton);
            xCurr += (float)_allFilmsButton.Frame.Width + _xBetweenControls;

            // Create the Cancel button.
            var cancelButtonRect = new CGRect(xCurr, yCurr, _buttonWidth, _buttonHeight);
            _cancelButton = Presentor.CreateCancelButton(cancelButtonRect);
            _cancelButton.Title = "Close";
            _cancelButton.Action = new ObjCRuntime.Selector("CancelDownloadFilmInfo:");
            View.AddSubview(_cancelButton);
        }

        private void VisitUrl(Film film)
        {
            foreach (var catagory in WebUtility.FolderByCatagory.Keys)
            {
                var url = WebUtility.UrlString(film.Title, catagory);
                var request = WebRequest.Create(url) as HttpWebRequest;
                try
                {
                    var filminfo = WebUtility.TryParseUrlSummary(request, url, catagory, film.FilmId);
                    if (filminfo != null)
                    {
                        Presentor.AddFilmInfo(filminfo);
                        film.InfoStatus = Film.FilmInfoStatus.Complete;
                    }
                    break;
                }
                catch (UnparseblePageException)
                {
                    film.InfoStatus = Film.FilmInfoStatus.ParseError;
                    break;
                }
                catch (WebException)
                {
                    film.InfoStatus = Film.FilmInfoStatus.UrlError;
                }
            }
        }

        private void DownloadFilmInfo()
        {
            // Disable the buttons on the modal dialog, forcing to await feedback.
            _startButton.Enabled = false;
            _cancelButton.Enabled = false;

            // Start processing in background.
            var startTime = DateTime.Now;
            var builder = new StringBuilder($"{LogTimeString()} Start analyzing {_filmsWithoutInfo.Count} websites" + _nl);
            Task.Factory.StartNew
            (
                // Download and process on a background thread, allowing the UI
                // to remain responsive.
                () => AsyncDownloadFilmInfo(builder)

            ).ContinueWith
            (
                // Start a new task (this launches a new thread). When the
                // background work is done, continue with this code block.
                task =>
                {
                    var endTime = DateTime.Now;
                    var duration = endTime - startTime;
                    SetProgressLabelStringValue();
                    builder.AppendLine($"{LogTimeString()} Done analyzing, duration {duration.ToString("hh\\:mm\\:ss")}.");
                    _activityField.StringValue = builder.ToString();
                    var fit = _activityField.SizeThatFits(_activityField.Frame.Size);
                    _activityField.SetFrameSize(fit);
                    var yScroll = _activityField.Frame.Height - _activityScrollView.Frame.Height;
                    _activityScrollView.ContentView.ScrollToPoint(new CGPoint(0, yScroll));
                    _cancelButton.Enabled = true;
                },
                // Force the code in the ContinueWith block to be run on the
                // calling thread.
                TaskScheduler.FromCurrentSynchronizationContext()
            );
        }

        private void AsyncDownloadFilmInfo( StringBuilder builder)
        {
            foreach (var film in _filmsWithoutInfo)
            {
                VisitUrl(film);
                builder.AppendLine($"{LogTimeString()} - {film.ToString()} - {film.InfoStatus.ToString()}");
            }
        }

        //private void UpdateUI(ref StringBuilder builder, Film prevFilm, Film currFilm)
        //{
        //    SetProgressLabelStringValue();
        //    // Display result of previous film.
        //    if(prevFilm != null)
        //    {
        //        builder.AppendLine($" - {prevFilm.InfoStatus.ToString()}");
        //        _activityField.StringValue = builder.ToString();
        //    }

        //    // Announce current film stat.
        //    if(currFilm != null)
        //    {
        //        builder.AppendFormat($"{LogTimeString()} - {currFilm.ToString()}");
        //        _activityField.StringValue = builder.ToString();
        //    }
        //}

        private string LogTimeString()
        {
            return $"{DateTime.Now.ToString(_dateTimeFormat)}";
        }

        void CloseView()
        {
            Presentor.DismissViewController(this);
        }
        #endregion

        #region Custom Actions
        [Action("DownloadFilmInfo:")]
        private void DownloadFilmInfo(NSObject sender)
        {
            DownloadFilmInfo();
        }

        [Action("CancelDownloadFilmInfo:")]
        private void CancelDownloadFilmInfo(NSObject sender)
        {
            CloseView();
        }
        #endregion
    }
}
