// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using AppKit;
using CoreGraphics;
using CoreAnimation;
using System.Collections.Generic;

namespace PresentScreenings.TableView
{
	/// <summary>
    /// Combine title view controler, manages a sheet which allows the user to
    /// combine multiple films into one.
    /// The title of the film wich should become the film title of all
    /// screenings is chosen by means of a set of radio buttons.
    /// </summary>

    public partial class CombineTitlesSheetController : NSViewController
	{
        #region Private Constants
        const float _xMargin = 20;
        const float _xDistance = 8;
        const float _labelWidth = 25;
        const float _yMargin = 8;
        const float _yControlsDistance = 1;
        const float _controlsHeight = 19;
        const float _magicTwenty = 20;
        #endregion

        #region Private Variables
        nuint[] _filmIndexes;
        List<int> _filmIds;
        int _mainFilmId;
        NSView _filmsView;
        #endregion

        #region Application Access
        static AppDelegate _app => (AppDelegate)NSApplication.SharedApplication.Delegate;
        #endregion

        #region Properties
        public FilmRatingDialogController Presentor;
        #endregion

        #region Constructors
        public CombineTitlesSheetController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Override Methods
        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate we're alive.
            _app.CombineTitleController = this;

            // Initialize.
            var filmList = Presentor.FilmRatingTableView.SelectedRows;
            _filmIndexes = filmList.ToArray();
            _mainFilmId = Presentor.GetFilmByIndex(_filmIndexes[0]).FilmId;
            _filmIds = new List<int>();
            _filmsView = new NSView();

            // Define dimensions.
            nfloat scrollViewWidth = _screeningsScrollView.Frame.Width;
            nfloat scrollViewHeight = _screeningsScrollView.Frame.Height;
            nfloat filmsViewWidth = scrollViewWidth;
            nfloat controlsWidth = scrollViewWidth - 2 * _xMargin;
            nfloat radioButtonWidth = controlsWidth - _xDistance - _labelWidth;
            nfloat xLabel = _xMargin + radioButtonWidth + _xDistance;
            nfloat ySpace = _controlsHeight + _yControlsDistance;
            nfloat H = 2 * _yMargin + filmList.Count * ySpace;
#warning Explain magic number 20!
            nfloat filmsViewHeight = H > scrollViewHeight + _magicTwenty ? H : scrollViewHeight + _magicTwenty;

            // Create the ducument view displaying the screenings.
            nfloat x = _screeningsScrollView.Frame.X;
            nfloat y = _screeningsScrollView.Frame.Y;
            CGRect screeningsViewFrame = new CGRect(0, 0, filmsViewWidth, filmsViewHeight);
            //CAGradientLayer gradient = new CAGradientLayer();
            //CGColor[] colors = { NSColor.Blue.ColorWithAlphaComponent((nfloat)0.2).CGColor,
            //                     NSColor.Blue.ColorWithAlphaComponent((nfloat)0.4).CGColor };
            //gradient.Colors = colors;
            //gradient.Frame = screeningsViewFrame;
            _filmsView = new NSView(screeningsViewFrame);
            //_filmsView.WantsLayer = true;
            //_filmsView.Layer?.AddSublayer(gradient);
            _screeningsScrollView.BackgroundColor = NSColor.WindowBackground;
            _screeningsScrollView.DocumentView = _filmsView;
            _screeningsScrollView.ContentView.ScrollToPoint(new CGPoint(0, filmsViewHeight));

            // Prepare setting constraints.
            var views = new NSMutableDictionary();

            // Create labels with the film titles.
            nfloat yCurr = filmsViewHeight - ySpace - _yMargin;
            foreach (var filmIndex in _filmIndexes)
            {
                // Add an item to the film id list.
                Film film = Presentor.GetFilmByIndex(filmIndex);
                _filmIds.Add(film.FilmId);

                // Create a radio button for the film title.
                CGRect radioButtonRect = new CGRect(_xMargin, yCurr, radioButtonWidth, _controlsHeight);
                NSButton titleRadioButton = new NSButton(radioButtonRect);
                titleRadioButton.SetButtonType(NSButtonType.Radio);
                titleRadioButton.Action = new ObjCRuntime.Selector("MainTitleChanged:");
                titleRadioButton.State = film.FilmId == _mainFilmId ? NSCellStateValue.On : NSCellStateValue.Off;
                titleRadioButton.Tag = film.FilmId;
                titleRadioButton.Title = film.Title;
                _filmsView.AddSubview(titleRadioButton);

                // Create a label for the rating.
                CGRect labelRect = new CGRect(xLabel, yCurr, _labelWidth, _controlsHeight);
                NSTextField ratingLabel = new NSTextField(labelRect);
                ratingLabel.Alignment = NSTextAlignment.Right;
                ratingLabel.BackgroundColor = NSColor.WindowBackground;
                ratingLabel.Bordered = false;
                ratingLabel.Editable = false;
                ratingLabel.StringValue = Presentor.GetFilmByIndex(filmIndex).Rating.ToString();
                _filmsView.AddSubview(ratingLabel);

                // Increase the vertical position.
                yCurr -= ySpace;
            }

            // Make the sheet unresizable (sorry, couln't find an other way).
#warning Make this working

            // Get views being constrained
            views.Add(new NSString("title"), _titleLabel);
            
            // Define format and assemble constraints
            var horzFormat = "|-[title]-|";
            var horzConstraints = NSLayoutConstraint.FromVisualFormat(horzFormat, NSLayoutFormatOptions.None, null, views);
            var vertFormat = "V:|-[title]";
            var vertConstraints = NSLayoutConstraint.FromVisualFormat(vertFormat, NSLayoutFormatOptions.None, null, views);
            
            // Apply constraints
            NSLayoutConstraint.ActivateConstraints(horzConstraints);
            NSLayoutConstraint.ActivateConstraints(vertConstraints);
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate we're gone.
            _app.CombineTitleController = null;
        }
        #endregion

        #region Private Methods
        void CloseSheet()
        {
            Presentor.DismissViewController(this);
        }
        #endregion

        #region Custom Actions
        partial void AcceptSheet(Foundation.NSObject sender)
        {
            RaiseSheetAccepted();
            CloseSheet();
        }

        partial void CancelSheet(Foundation.NSObject sender)
        {
            RaiseSheetCanceled();
            CloseSheet();
        }

        [Action("MainTitleChanged:")]
        void MainTitleChanged(NSObject sender)
        {
            var radioButton = sender as NSButton;
            _mainFilmId = (int)radioButton.Tag;
        }
        #endregion

        #region Events
        public EventHandler SheetAccepted;

        internal void RaiseSheetAccepted()
        {
            SheetAccepted?.Invoke(this, new CombineTitlesEventArgs(_filmIds, _mainFilmId));
        }

        public EventHandler SheetCanceled;

        internal void RaiseSheetCanceled()
        {
            SheetCanceled?.Invoke(this, EventArgs.Empty);
        }
        #endregion
    }
}
