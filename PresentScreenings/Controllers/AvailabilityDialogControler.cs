// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;

namespace PresentScreenings.TableView
{
	/// <summary>
    /// Availability Dialog Controller, manages the user interface to
    /// administrate film fan availablility.
    /// </summary>

	public partial class AvailabilityDialogControler : NSViewController
    {
        #region Private Constants
        private const float _xMargin = ControlsFactory.HorizontalMargin;
        private const float _xDistance = ControlsFactory.HorizontalPixelsBetweenControls;
        private const float _controlsWidth = ControlsFactory.StandardButtonWidth;
        private const float _controlsHeight = ControlsFactory.StandardButtonHeight;
        private const float _yXcodeControlsMargin = ControlsFactory.HorizontalMargin;
        #endregion

        #region Properties
        private static AppDelegate _app => (AppDelegate)NSApplication.SharedApplication.Delegate;
        public ViewController Presentor { get; set; }
        #endregion

        #region Constructors
        public AvailabilityDialogControler (IntPtr handle) : base (handle)
		{
		}
        #endregion

        #region Override Methods
        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate we're alive.
            _app.AvailabilityDialogControler = this;

            // Initialize the presentor.
            Presentor = _app.Controller;

            // Inactivate screenings view actions.
            Presentor.RunningPopupsCount++;

            // Initialize.


            // Create the action buttons at the bottom of the screen.
            CreateActionButtons();

            // Set constraints of the in-code generated UI elements.
            //SetConstraints();
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate we're gone.
            _app.PlannerDialogController = null;

            // Tell the main view controller we're gone.
            Presentor.RunningPopupsCount--;
        }
        #endregion

        #region Public Methods
        public void CloseDialog()
        {
            Presentor.DismissViewController(this);
        }
        #endregion

        #region Private Methods
        private void CreateActionButtons()
        {
            var xCurr = View.Frame.Width;

            // Create the Close button.
            xCurr -= _xDistance + _controlsWidth;
            var doneButton = ControlsFactory.NewCancelButton(new CGRect(xCurr, _yXcodeControlsMargin, _controlsWidth, _controlsHeight));
            doneButton.Title = "Close";
            doneButton.Action = new ObjCRuntime.Selector("CloseAvailabilityDialog:");
            View.AddSubview(doneButton);
        }
        #endregion

        #region Custom Actions
        [Action("CloseAvailabilityDialog:")]
        private void ClosePlanView(NSObject sender)
        {
            CloseDialog();
        }
        #endregion

    }
}
