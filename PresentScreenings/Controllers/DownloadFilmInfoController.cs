// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using AppKit;
using CoreGraphics;
using Foundation;
using static System.Environment;

namespace PresentScreenings.TableView
{
    public partial class DownloadFilmInfoController : NSViewController
    {
        #region Constants
        private const float _xMargin = ControlsFactory.HorizontalMargin;
        private const float _xBetweenControls = ControlsFactory.HorizontalPixelsBetweenControls;
        private const float _buttonWidth = ControlsFactory.StandardButtonWidth;
        private const float _yMargin = ControlsFactory.BigVerticalMargin;
        private const float _yBetweenViews = ControlsFactory.VerticalPixelsBetweenViews;
        private const float _yBetweenLabels = ControlsFactory.VerticalPixelsBetweenLabels;
        private const float _labelHeight = ControlsFactory.StandardLabelHeight;
        private const float _buttonHeight = ControlsFactory.StandardButtonHeight;
        private static string _nl = NewLine;
        private const string _dateTimeFormat = "yyyy-MM-dd HH:mm:ss";
        #endregion

        #region Private Variables
        private bool _canceled;
        private float _contentWidth;
        private float _yCurr;
        private NSTextField _progressLabel;
        private NSTextField _infoStatusCountsLabel;
        private NSTextField _activityLabel;
        private NSTextField _activityField;
        private NSScrollView _activityScrollView;
        private NSButton _startButton;
        private NSButton _stopButton;
        private NSButton _closeButton;
        private NSView _sampleView;
        private CancellationTokenSource _cancellationTokenSource;
        private List<Film> _films;
        private List<Film> _filmsWithoutInfo;
        #endregion

        #region Properties
        public static AppDelegate App => (AppDelegate)NSApplication.SharedApplication.Delegate;
        public FilmRatingDialogController Presentor { get; set; }
        private NSCell CocoaCloseButton => (NSCell)View.Window.AccessibilityCloseButton;
        #endregion

        #region Constructors
        public DownloadFilmInfoController(IntPtr handle) : base(handle)
        {
            _filmsWithoutInfo = new List<Film>();
        }
        #endregion

        #region Override Methods
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Get the selected films.
            var indexes = Presentor.FilmRatingTableView.SelectedRows.ToList();
            _films = new List<Film>(indexes.Select(Presentor.GetFilmByIndex));
            _filmsWithoutInfo = GetFilmsWithoutInfo(_films);

            // Set generally usable dimensions.
            var frame = View.Frame;
            _contentWidth = (float)frame.Width - 2 * _xMargin;
            _yCurr = (float)frame.Height;

            // Create the info labels.
            _yCurr -= _yMargin;
            CreateInfoLabels(ref _yCurr);

            //Create the activity scroll view.
            _yCurr -= _yBetweenViews;
            CreateActivityScrollView(ref _yCurr, _yCurr - _yMargin - _buttonHeight - _yBetweenViews);

            // Create the buttons at the bottom of the view.
            _yCurr = _yMargin + _buttonHeight;
            CreateActionButtons(ref _yCurr);

            // Disable resizing.
            Presentor.DisableResizing(this, _sampleView);
        }

        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate that we're alive.
            App.DownloadFilmInfoController = this;
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate that we're gone.
            App.DownloadFilmInfoController = null;
        }
        #endregion

        #region Public Methods
        public static string LogTimeString()
        {
            return $"{DateTime.Now.ToString(_dateTimeFormat)}";
        }
        #endregion

        #region Private Methods to complete the UI.
        private void CreateInfoLabels(ref float yCurr)
        {
            // Create the label to display the count of selected films.
            yCurr -= _labelHeight;
            var selectedCountRect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            var selectedCountLabel = ControlsFactory.NewStandardLabel(selectedCountRect);
            selectedCountLabel.StringValue = $"Selected films: {_films.Count}";
            View.AddSubview(selectedCountLabel);

            // Set sample view used to disable resizing.
            _sampleView = selectedCountLabel;

            // Create the label to display progress.
            yCurr -= _yBetweenLabels + _labelHeight;
            var progressRect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            _progressLabel = ControlsFactory.NewStandardLabel(progressRect);
            _progressLabel.StringValue = $"Without info: {_filmsWithoutInfo.Count}";
            View.AddSubview(_progressLabel);

            // Create the label to display the count of each film info status.
            yCurr -= _yBetweenLabels + _labelHeight;
            var infoStatusCountsRect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            _infoStatusCountsLabel = ControlsFactory.NewStandardLabel(infoStatusCountsRect);
            DisplayCountsPerFilmInfoStatus();
            View.AddSubview(_infoStatusCountsLabel);

            // Create the activity label.
            yCurr -= _yBetweenLabels + _labelHeight;
            var activityRect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            _activityLabel = ControlsFactory.NewStandardLabel(activityRect);
            if (_filmsWithoutInfo.Count == 0)
            {
                DisplayNewActivity("No films without information");
            }
            else
            {
                DisplayNewActivity($"Ready to visit {_filmsWithoutInfo.Count} websites.");
            }
            View.AddSubview(_activityLabel);
        }

        private void CreateActivityScrollView(ref float yCurr, float height)
        {
            _yCurr -= height;

            // Create the document view to contain the activity descption.
            var docRect = new CGRect(0, 0, _contentWidth, height);
            _activityField = ControlsFactory.NewStandardLabel(docRect);
            _activityField.StringValue = ToDoFilmsString();
            _activityField.CanDrawConcurrently = true;
            var fit = _activityField.SizeThatFits(_activityField.Frame.Size);
            _activityField.SetFrameSize(fit);

            // Create the scroll view.
            var rect = new CGRect(_xMargin, yCurr, _contentWidth, height);
            _activityScrollView = ControlsFactory.NewStandardScrollView(rect, _activityField);
            View.AddSubview(_activityScrollView);
        }

        private void CreateActionButtons(ref float yCurr)
        {
            var xCurr = _xMargin;
            yCurr -= _buttonHeight;
            var visitCount = _filmsWithoutInfo.Count;

            // Create the Start button.
            var startButtonRect = new CGRect(xCurr, yCurr, _buttonWidth + 10, _buttonHeight);
            _startButton = ControlsFactory.NewStandardButton(startButtonRect);
            _startButton.Title = $"Visit {visitCount} sites";
            _startButton.LineBreakMode = NSLineBreakMode.ByWordWrapping;
            _startButton.KeyEquivalent = ControlsFactory.EnterKey;
            _startButton.Enabled = visitCount > 0;
            _startButton.Action = new ObjCRuntime.Selector("DownloadFilmInfo:");
            View.AddSubview(_startButton);
            xCurr += (float)_startButton.Frame.Width + _xBetweenControls;

            // Create the Stop button.
            var stopButtonRect = new CGRect(xCurr, yCurr, _buttonWidth, _buttonHeight);
            _stopButton = ControlsFactory.NewStandardButton(stopButtonRect);
            _stopButton.Title = "Stop";
            _stopButton.Enabled = false;
            _stopButton.Action = new ObjCRuntime.Selector("CancelDownloading:");
            View.AddSubview(_stopButton);
            xCurr += (float)_stopButton.Frame.Width + _xBetweenControls;

            // Create the Close button.
            var closeButtonRect = new CGRect(xCurr, yCurr, _buttonWidth, _buttonHeight);
            _closeButton = ControlsFactory.NewCancelButton(closeButtonRect);
            _closeButton.Title = "Close";
            _closeButton.Action = new ObjCRuntime.Selector("CloseDownloadFilmInfoDialog:");
            View.AddSubview(_closeButton);
        }
        #endregion

        #region Private Methods to maintain the UI.
        private void DisplayProgress(int todoCount = 0)
        {
            var oldCount = _filmsWithoutInfo.Count;
            var newCount = GetFilmsWithoutInfo(_films).Count;
            var processedCount = oldCount - todoCount;
            var completedCount = oldCount - newCount;
            _progressLabel.StringValue = $"Processed: {processedCount}, completed: {completedCount}";
        }

        private void DisplayCountsPerFilmInfoStatus()
        {
            var states = new List<string> { };
            foreach (Film.FilmInfoStatus filmInfoStatus in Enum.GetValues(typeof(Film.FilmInfoStatus)))
            {
                var statusCount = _films.Count(f => f.InfoStatus == filmInfoStatus);
                var statusName = Enum.GetName(typeof(Film.FilmInfoStatus), filmInfoStatus);
                states.Add($"{statusCount} {statusName}");
            }
            _infoStatusCountsLabel.StringValue = string.Join(", ", states);
        }

        private void DisplayNewActivity(string activityDescription)
        {
            _activityLabel.StringValue = activityDescription;
        }

        private void SetActivityScrollerText(StringBuilder builder)
        {
            _activityField.StringValue = builder.ToString();
            var fit = _activityField.SizeThatFits(_activityField.Frame.Size);
            fit.Width = _activityField.Frame.Width;
            _activityField.SetFrameSize(fit);
            var yScroll = _activityField.Frame.Height - _activityScrollView.Frame.Height;
            _activityScrollView.ContentView.ScrollToPoint(new CGPoint(0, yScroll));
        }

        private string ToDoFilmsString()
        {
            var builder = new StringBuilder("To do:" + NewLine + NewLine);
            foreach (Film film in _filmsWithoutInfo)
            {
                builder.AppendLine($"{film}, {film.InfoStatus}");
            }
            return builder.ToString();
        }

        private void SetButtonEnablementForDownload()
        {
            _startButton.Enabled = false;
            _closeButton.Enabled = false;
            CocoaCloseButton.Enabled = false;
            _stopButton.Enabled = true;
        }

        private void SetButtonEnablementForAfterDownload()
        {
            _closeButton.Enabled = true;
            CocoaCloseButton.Enabled = true;
            _stopButton.Enabled = false;
        }

        private void CloseView()
        {
            Presentor.DismissViewController(this);
        }
        #endregion

        #region Private Methods working with downloading.
        private List<Film> GetFilmsWithoutInfo(List<Film> films)
        {
            var filmsWithoutInfo = (
                from Film film in _films
                where film.InfoStatus != Film.FilmInfoStatus.Complete
                select ViewController.GetFilmById(film.FilmId)
            ).ToList();
            return filmsWithoutInfo;
        }

        private async void DownloadFilmInfo()
        {
            // Prevent the popup window to be closed.
            SetButtonEnablementForDownload();

            // Prepare statistics to be displayed.
            int todoCount = _filmsWithoutInfo.Count;
            var startTime = DateTime.Now;
            var builder = new StringBuilder($"{LogTimeString()} Start analyzing {_filmsWithoutInfo.Count} websites" + _nl);

            // For each site to be visited, load the content in background.
            _cancellationTokenSource = new CancellationTokenSource();
            _canceled = false;
            foreach (var film in _filmsWithoutInfo)
            {
                DisplayNewActivity($"{todoCount} to do, working on {film}.");
                _canceled = await WebUtility.VisitUrl(film, _cancellationTokenSource.Token);
                if (_canceled)
                {
                    break;
                }
                --todoCount;
                DisplayNewActivity($"{todoCount} to do, done with {film}.");
                DisplayCountsPerFilmInfoStatus();
                DisplayProgress(todoCount);
                builder.AppendLine($"{LogTimeString()} - {film} - {film.InfoStatus}");
                SetActivityScrollerText(builder);
            }

            // Report what was accomplished.
            var endTime = DateTime.Now;
            var duration = endTime - startTime;
            var durationString = $"duration {duration:hh\\:mm\\:ss}";
            DisplayCountsPerFilmInfoStatus();
            DisplayProgress(todoCount);
            if (_canceled)
            {
                DisplayNewActivity($"Stopped.");
                builder.AppendLine($"{LogTimeString()} Downloading stopped, {durationString}");
            }
            else
            {
                DisplayNewActivity($"Done visiting {_filmsWithoutInfo.Count} websites.");
                builder.AppendLine($"{LogTimeString()} Done analyzing, {durationString}");
            }
            SetActivityScrollerText(builder);

            // Dispose the cancellation token source.
            _cancellationTokenSource = null;

            // Reload the data.
            Presentor.FilmRatingTableView.ReloadData();

            // Restore the original selection of films.
            Presentor.SelectFilms(_films);

            // Allow closing og the popup window.
            SetButtonEnablementForAfterDownload();
        }

        private void CancelDownloading()
        {
            if (_cancellationTokenSource != null)
            {
                DisplayNewActivity("Cancelling downloads....");
                _cancellationTokenSource.Cancel();
            }
        }
        #endregion

        #region Custom Actions
        [Action("DownloadFilmInfo:")]
        private void DownloadFilmInfo(NSObject sender)
        {
            DownloadFilmInfo();
        }

        [Action("CancelDownloading:")]
        private void CancelDownloading(NSObject sender)
        {
            CancelDownloading();
        }

        [Action("CloseDownloadFilmInfoDialog:")]
        private void CloseDownloadFilmInfoDialog(NSObject sender)
        {
            CloseView();
        }
        #endregion
    }
}
