// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AppKit;
using CoreGraphics;
using Foundation;

namespace PresentScreenings.TableView
{
    /// <summary>
    /// Warnings dialog controller, manages a modal dialog that displays all
    /// screenings that have warnings. From a screening in the list, a segue can
    /// be made to the screeng's Screening Info dialog.
    /// </summary>
    public partial class WarningsDialogControler : NSViewController
	{
        #region Private Constants
        private const float _xMargin = ControlsFactory.HorizontalMargin;
        private const float _yMargin = ControlsFactory.BigVerticalMargin;
        private const float _xBetweenViews = ControlsFactory.HorizontalPixelsBetweenControls;
        private const float _yBetweenViews = ControlsFactory.VerticalPixelsBetweenControls;
        private const float _xBetweenLabels = ControlsFactory.HorizontalPixelsBetweenLabels;
        private const float _labelWidth = ControlsFactory.SmallControlWidth;
        private const float _labelHeight = ControlsFactory.StandardLabelHeight;
        private const float _imageSide = ControlsFactory.StandardImageSide;
        private const float _screeningHeight = ControlsFactory.BigScreeningLabelHeight;
        private const float _rowHeight = _screeningHeight + _labelHeight;
        private const float _buttonWidth = ControlsFactory.StandardButtonWidth;
        private const float _buttonHeight = ControlsFactory.StandardButtonHeight;
        private const float _yBetweenRows = ControlsFactory.WideVerticalPixelsBetweenLabels;
        private const float _xScrollerMargin = ControlsFactory.SmallHorizontalMargin;
        private const float _yScrollerMargin = _xScrollerMargin;
        #endregion

        #region Private Variables
        private static ViewController _presentor;
        private List<Screening> _screenings;
        private nfloat _contentWidth;
        private CGRect _imageFrame;
        private CGRect _headerFrame;
        private CGRect _scrollerFrame;
        private CGRect _closeButtonFrame;
        private bool _doSetInitiallyVisibleFrame = false;
        private CGRect _initiallyVisibleFrame;
        private NSView _sampleView;
        private NSButton _doneButton;
        #endregion

        #region Properties
        public static AppDelegate App => (AppDelegate)NSApplication.SharedApplication.Delegate;
        public Dictionary<Screening, NSView> LabelByScreening { get; private set; }

        public bool ScreeningInfoChanged
        {
            get => View.Window.DocumentEdited;
            private set
            {
                View.Window.DocumentEdited = value;
                if (value)
                {
                    ScreeningInfo.ScreeningInfoChanged = true;
                }
            }
        }
        #endregion

        #region Constructors
        public WarningsDialogControler (IntPtr handle) : base (handle)
        {
            LabelByScreening = new Dictionary<Screening, NSView> { };
        }
        #endregion

        #region Override Methods
        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            _presentor = App.Controller;
        }

        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate we're alive.
            App.WarningsController = this;

            // Inactivate screenings view actions.
            _presentor.RunningPopupsCount++;

            // Get the screenings with warnings.
            GetScreenings();

            // Set up the dialog layout.
            SetUpLayout();

            // Create the warning image.
            CreateWarningImage();

            // Create a header label.
            CreateHeaderLabel();

            // Create the scroll view.
            CreateScrollView();

            // Create the close button.
            CreateDoneButton();

            // Disable Resizing.
            GoToScreeningDialog.DisableResizing(this, _sampleView);
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate we're gone.
            App.WarningsController = null;

            // Tell the main view controller we're gone.
            _presentor.RunningPopupsCount--;
        }
        #endregion

        #region Public Methods
        public void GoToScreening(Screening screening)
        {
            _presentor.GoToScreening(screening);
            CloseDialog();
        }

        public void ToggleTicketStatus(Screening screening)
        {
            screening.TicketsBought = !screening.TicketsBought;
            var label = LabelByScreening[screening];
            label.NeedsDisplay = true;
            _presentor.UpdateAttendanceStatus(screening);
            _presentor.UpdateWarnings();
            _presentor.ReloadScreeningsView(false);
            ScreeningInfoChanged = true;
            _doneButton.Title = ControlsFactory.TitleByChanged[ScreeningInfoChanged];
        }
        #endregion

        #region Private Methods
        private void GetScreenings()
        {
            List<Screening> screenings = _presentor.ScreeningsWithWarnings
                .ToList();
            screenings.AddRange(_presentor.ScreeningsWithTicketsToBuy);
            screenings.AddRange(_presentor.ScreeningsWithTicketsToSell);
            var screeningComparer = new ScreeningEqualityComparer();
            _screenings = screenings
                .Distinct(screeningComparer)
                .OrderBy(s => s.StartTime)
                .ThenBy(s => s.Screen.ToString())
                .ToList();
        }

        private void SetUpLayout()
        {
            _contentWidth = View.Frame.Width - 2 * _xMargin;

            // Set up frame for warning image.
            var yImage = View.Frame.Height - _yMargin - _imageSide;
            _imageFrame = new CGRect(_xMargin, yImage, _imageSide, _imageSide);

            // Set up frame for header label.
            var xHeader = _imageFrame.X + _imageFrame.Width + _xBetweenViews;
            var yHeader = yImage;
            var headerWidth = _contentWidth - _imageSide - _xBetweenViews;
            _headerFrame = new CGRect(xHeader, yHeader, headerWidth, _imageSide);

            // Set up frame for the warnings scroller view.
            var yScroller = _yMargin + _buttonHeight + _yBetweenViews;
            var scrollerHeight = _headerFrame.Y - _yBetweenViews - yScroller;
            _scrollerFrame = new CGRect(_xMargin, yScroller, _contentWidth, scrollerHeight);

            // Set up frame for close button.
            var xCloseButton = _scrollerFrame.X + _scrollerFrame.Width - _buttonWidth;
            _closeButtonFrame = new CGRect(xCloseButton, _yMargin, _buttonWidth, _buttonHeight);
        }

        private void CreateWarningImage()
        {
            var imageView = ControlsFactory.NewWarningImageView(_imageFrame);
            View.AddSubview(imageView);
        }

        private void CreateHeaderLabel()
        {
            var warningCount = _presentor.WarningCount;
            var buyCount = _presentor.BuyCount;
            var sellCount = _presentor.SellCount;
            var headerLabel = ControlsFactory.NewStandardLabel(_headerFrame, true);
            headerLabel.Font = ControlsFactory.StandardFont;
            headerLabel.Alignment = NSTextAlignment.Center;
            var builder = new StringBuilder();
            builder.Append(ControlsFactory.GlobalWarningsString(warningCount));
            builder.AppendLine();
            builder.Append(ControlsFactory.TicketProblemsLines(buyCount, sellCount));
            headerLabel.StringValue = builder.ToString();
            View.AddSubview(headerLabel);
        }

        private void CreateScrollView()
        {
            // Create the document view.
            var docViewHeight = _screenings.Count * (_rowHeight + _yBetweenRows) + 2 * _yScrollerMargin;
            var docViewFrame = new CGRect(0, 0, _contentWidth, docViewHeight);
            var documentView = new NSView(docViewFrame);

            // Create the scroll view.
            var scrollView = ControlsFactory.NewStandardScrollView(_scrollerFrame, documentView, true);
            View.AddSubview(scrollView);

            // Add the screening rows.
            AddScreeningRows(documentView);

            // Scroll to the selected screening.
            if (_doSetInitiallyVisibleFrame)
            {
                scrollView.ContentView.ScrollRectToVisible(_initiallyVisibleFrame);
            }

            // Set sample view used to disable resizing.
            _sampleView = scrollView;
        }

        private void AddScreeningRows(NSView docView)
        {
            var yRow = docView.Frame.Height - _yScrollerMargin - _rowHeight;
            var rowWidth = docView.Frame.Width - 2 * _xScrollerMargin;

            // Create a frame for the Go To Screening button.
            var buttonSide = _screeningHeight;
            var yButton = yRow + _labelHeight;
            var buttonRect = new CGRect(_xScrollerMargin, yButton, buttonSide, buttonSide);

            // Create a frame for the screening label.
            var xScreening = _xScrollerMargin + buttonSide;
            var yScreening = yButton;
            var screeningWidth = rowWidth - buttonSide - _labelWidth - 2 * _xBetweenLabels;
            var screeningRect = new CGRect(xScreening, yScreening, screeningWidth, _screeningHeight);

            // Create a frame for the Tickets Bought checkbox.
            var xBox = xScreening + screeningWidth + _xBetweenLabels;
            var yBox = yScreening + ControlsFactory.VerticalPixelsBetweenControls;
            var boxRect = new CGRect(xBox, yBox, _labelWidth, _labelHeight);

            // Create a frame for the warning label.
            var warningRect = new CGRect(_xScrollerMargin, yRow, rowWidth, _labelHeight);

            // Add screening rows to the document view.
            var yShift = _rowHeight + _yBetweenRows;
            foreach (var screening in _screenings)
            {
                // Add the Go To Screening button.
                var gotoButton = new FilmScreeningControl(buttonRect, screening);
                gotoButton.ScreeningInfoAsked += (sender, e) => GoToScreening(screening);
                gotoButton.Selected = screening == _presentor.CurrentScreening;
                docView.AddSubview(gotoButton);

                // Add the screening label.
                var screeningLabel = new ClickableScreeningLabel(
                    screeningRect,
                    screening,
                    true,
                    GoToScreening);
                LabelByScreening.Add(screening, screeningLabel);
                docView.AddSubview(screeningLabel);


                // Add the Tickets Bought checkbox.
                var box = ControlsFactory.NewCheckbox(boxRect);
                box.Title = "Tickets";
                box.Activated += (sender, e) => ToggleTicketStatus(screening);
                box.State = screening.TicketsBought ? NSCellStateValue.On : NSCellStateValue.Off;
                docView.AddSubview(box);

                // Add the warning label.
                var warningLabel = ControlsFactory.NewScreeningWarningLabel(warningRect, screening);
                docView.AddSubview(warningLabel);

                // Support scrolling to the selected screening.
                if (screening == _presentor.CurrentScreening)
                {
                    _initiallyVisibleFrame = warningRect;
                    _doSetInitiallyVisibleFrame = true;
                }

                // Shift the frames.
                buttonRect.Y -= yShift;
                screeningRect.Y -= yShift;
                boxRect.Y -= yShift;
                warningRect.Y -= yShift;
            }
        }

        private void CreateDoneButton()
        {
            _doneButton = ControlsFactory.NewCancelButton(_closeButtonFrame);
            _doneButton.Action = new ObjCRuntime.Selector("CloseWarningsDialog:");
            _doneButton.Title = ControlsFactory.TitleByChanged[ScreeningInfoChanged];
            View.AddSubview(_doneButton);
        }

        void CloseDialog()
        {
            if (ScreeningInfoChanged)
            {
                // Save the screening info.
                ScreeningDialogController.SaveScreeningInfo();

                // Unset the Document Edited flag of the presentor.
                _presentor.ScreeningInfoChanged = false;
            }

            // Close the dialog.
            _presentor.DismissViewController(this);
        }
        #endregion

        #region Custom Actions
        [Action("CloseWarningsDialog:")]
        void CloseWarningsDialog(NSObject sender)
        {
            CloseDialog();
        }
        #endregion
    }
}
