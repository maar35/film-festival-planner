// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using Foundation;
using AppKit;
using CoreGraphics;

namespace PresentScreenings.TableView
{
    /// <summary>
    /// Screening dialog controler, manages a dialog which displays extra information
    /// of a screening and in which editable screening properties can be changed.
    /// </summary>

    public partial class ScreeningDialogController : SelfDestructableDialog, IScreeningProvider
    {
        #region Private Members
        const float _xMargin = ControlsFactory.HorizontalMargin;
        const float _comboboxWidth = 38;
        const float _comboboxHeight = 22;
        const float _yControlsDistance = 1;
        const float _yCheckboxSpace = _comboboxHeight + _yControlsDistance;
        const float _yScreeningLabelSpace = 20;
        Screening _screening;
        ScreeningControl _control;
        ViewController _presentor;
        List<Screening> _filmScreenings;
        FilmScreeningControl _screeningInfoControl;
        Dictionary<Screening, NSTextField> _labelByfilmScreening;
        Dictionary<string, AttendanceCheckbox> _attendanceCheckboxByFriend;
        #endregion

        #region Computed Properties
        public ViewController Presentor
        {
            get => _presentor;
            set => _presentor = (ViewController)value;
        }
        #endregion

        #region Interface Implementation Properties
        public Screening CurrentScreening => Presentor.Plan.CurrScreening;
        public List<Screening> Screenings => ViewController.FilmScreenings(Presentor.Plan.CurrScreening.FilmId);
        public Film CurrentFilm => Presentor.GetFilmById(CurrentScreening.FilmId);
        #endregion

        #region Constructors
        public ScreeningDialogController(IntPtr handle) : base(handle)
        {
            _filmScreenings = new List<Screening> { };
            _labelByfilmScreening = new Dictionary<Screening, NSTextField> { };
            _attendanceCheckboxByFriend = new Dictionary<string, AttendanceCheckbox> { };
        }
        #endregion

        #region Override Methods
        public override void AwakeFromNib()
        {
            base.AwakeFromNib();
        }
        public override void ViewDidLoad()
        {
            // Tell the presentor we're alive.
            _presentor.RunningPopupsCount += 1;

            // Populate controls.
            _filmInfoButton.Action = new ObjCRuntime.Selector("ShowFilmInfo:");
        }

        public override void ViewWillAppear()
        {
            base.ViewWillAppear();
            _control.Selected = true;
            _filmScreenings = _presentor.FilmScreenings(_screening);
            _checkboxTicketsBought.Activated += (s, e) => ToggleTicketsBought();
            _checkboxSoldOut.Activated += (s, e) => ToggleSoldOut();
            _checkboxIAttend.Activated += (s, e) => ToggleMyAttandance();
            _comboboxRating.EditingEnded += (s, e) => HandleRatingEditingEnded();
            SetControlValues();
            CreateFriendControls();
            CreateFilmScreeningControls();
        }

        public override void ViewWillDisappear()
        {
            _presentor.RunningPopupsCount--;
        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            // Take action based on the segue name
            switch (segue.Identifier)
            {
                case "ScreeningToFilmInfo":
                    var filmInfoModal = segue.DestinationController as FilmInfoSheetController;
                    filmInfoModal.Presentor = this;
                    filmInfoModal.ShowScreenings = false;
                    break;
            }
        }
        #endregion

        #region Private Methods
        void SetControlValues()
        {
            _comboboxRating.StringValue = _screening.Rating.ToString();
            _labelTitle.StringValue = _screening.FilmTitle;
            _labelScreen.StringValue = _screening.Screen.ParseName;
            _labelTime.StringValue = _screening.ToLongTimeString();
            _labelPresent.StringValue = _screening.AttendeesString();
            MyAttendanceTitler.SetTitle((TitledButton)_buttonIAttend, _screening.IAttend);
            _checkboxTicketsBought.State = ViewController.GetNSCellStateValue(_screening.TicketsBought);
            _checkboxSoldOut.State = ViewController.GetNSCellStateValue(_screening.SoldOut);
            _checkboxIAttend.Title = ScreeningStatus.Me;
            _checkboxIAttend.State = AttendanceCheckbox.SetAttendanceState(_screening.IAttend);
        }

        void CreateFriendControls()
        {
            foreach (var friend in ScreeningStatus.MyFriends)
            {
                // Create the friend rating combobox.
                int controlsBelowIAttendBoxCount = ScreeningStatus.MyFriends.IndexOf(friend);
                var comboboxFrame = RectLikeAt(_comboboxRating.Frame, controlsBelowIAttendBoxCount);
                var labelFrame = new CGRect(
                    _xMargin,
                    comboboxFrame.Y - _yControlsDistance,
                    comboboxFrame.Width,
                    _yCheckboxSpace - _yControlsDistance
                );
                var friendRatingCombobox = new NSComboBox(labelFrame);
                friendRatingCombobox.Add(FilmRating.Values.Select(str => new NSString(str)).ToArray());
                friendRatingCombobox.EditingEnded += (s, e) => HandleFriendRatingEditingEnded(friendRatingCombobox, friend);
                friendRatingCombobox.StringValue = _presentor.GetFriendFilmRating(_screening.FilmId, friend).ToString();
                friendRatingCombobox.Alignment = NSTextAlignment.Right;
                friendRatingCombobox.AutoresizesSubviews = true;
                View.AddSubview(friendRatingCombobox);

                // Create the checkbox.
                var checkboxFrame = RectLikeAt(_checkboxIAttend.Frame, controlsBelowIAttendBoxCount);
                var friendCheckbox = new AttendanceCheckbox(checkboxFrame);
                friendCheckbox.Title = friend;
                friendCheckbox.State = AttendanceCheckbox.SetAttendanceState(_screening.FriendAttends(friend));
                friendCheckbox.Activated += (s, e) => ToggleFriendAttendance(friend);
                View.AddSubview(friendCheckbox);

                // Link the checkbox to the friend.
                _attendanceCheckboxByFriend.Add(friend, friendCheckbox);
            }
        }

        void CreateFilmScreeningControls()
        {
            foreach (var screening in _filmScreenings)
            {
                // Create the screening label.
                float yRef = _yCheckboxSpace * (ScreeningStatus.MyFriends.Count);
                int numberOfControlsBelowIAttendBox = _filmScreenings.IndexOf(screening) + 1;
                CGRect rect = RectLikeAt(_checkboxIAttend.Frame, numberOfControlsBelowIAttendBox, _yScreeningLabelSpace, yRef);
                var screeningLabel = new NSTextField(rect);
                screeningLabel.Editable = false;
                screeningLabel.Bordered = screening == _screening;
                screeningLabel.LineBreakMode = NSLineBreakMode.TruncatingMiddle;
                screeningLabel.StringValue = screening.ToFilmScreeningLabelString();
                ColorView.SetScreeningColor(screening, screeningLabel);
                screeningLabel.Tag = _filmScreenings.IndexOf(screening);
                base.View.AddSubview(screeningLabel);
                _labelByfilmScreening.Add(screening, screeningLabel);

                // Create the screening info button.
                var infoButtonRect = new CGRect(rect.X - 22, rect.Y, 20, _yCheckboxSpace - 2);
                var infoBotton = new FilmScreeningControl(infoButtonRect, screening);
                infoBotton.ReDraw();
                infoBotton.ScreeningInfoAsked += (sender, e) => GoToScreening(screening);
                if (screening == _screening)
                {
                    _screeningInfoControl = infoBotton;
                    _screeningInfoControl.Selected = true;
                }
                base.View.AddSubview(infoBotton);
            }
        }

        void UpdateAttendances()
        {
            _labelPresent.StringValue = _screening.AttendeesString();
            _presentor.UpdateAttendanceStatus(_screening);
            _presentor.ReloadScreeningsView();
            foreach (var screening in _labelByfilmScreening.Keys)
            {
                ColorView.SetScreeningColor(screening, _labelByfilmScreening[screening]);
                _labelByfilmScreening[screening].StringValue = screening.ToFilmScreeningLabelString();
            }
            _screeningInfoControl.ReDraw();
        }

        public override void GoToScreening(Screening screening)
        {
            _presentor.GoToScreening(screening);
            CloseDialog();
        }

        CGRect RectLikeAt(CGRect sampleRect, float rectsBelowSampleRect, float ySpace = _yCheckboxSpace, float yRef = 0)
        {
            var rect = new CGRect(
                sampleRect.X,
                sampleRect.Y - yRef - ySpace * (rectsBelowSampleRect + 1),
                sampleRect.Width,
                sampleRect.Height
            );
            return rect;
        }

        void CloseDialog()
        {
            _presentor.DismissViewController(this);
        }

        void HandleRatingEditingEnded()
        {
            FilmRating rating = _screening.Rating;
            string oldRatingString = rating.Value;
            string newRatingString = rating.Value;
            if (SetNewValueFromComboBox(_comboboxRating, ref newRatingString))
            {
                if (_screening.Rating.SetRating(newRatingString))
                {
                    _presentor.ReloadScreeningsView();
                }
                else
                {
                    _comboboxRating.StringValue = oldRatingString;
                }
            }
        }

        void HandleFriendRatingEditingEnded(NSComboBox comboBox, string friend)
        {
            int filmId = _screening.FilmId;
            FilmRating rating = _presentor.GetFriendFilmRating(filmId, friend);
            string oldRatingString = rating.Value;
            string newRatingString = rating.Value;
            if (SetNewValueFromComboBox(comboBox, ref newRatingString))
            {
                if (rating.SetRating(newRatingString))
                {
                    _presentor.SetFriendFilmRating(filmId, friend, rating);
                    _presentor.ReloadScreeningsView();
                }
                else
                {
                    comboBox.StringValue = oldRatingString;
                }
            }
        }

        bool SetNewValueFromComboBox(NSComboBox comboBox, ref string refString)
        {
            string comboBoxString = comboBox.StringValue;
            if (comboBox.SelectedValue == null)
            {
                bool found = false;
                var max = comboBox.Count;
                for (int i = 0; i < max; i++)
                {
                    if (comboBoxString == comboBox.Values[i].ToString())
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    comboBox.StringValue = refString;
                    return false;
                }
            }
            else
            {
                comboBoxString = comboBox.SelectedValue.ToString();
            }
            if (comboBoxString == refString)
            {
                return false;
            }
            refString = comboBoxString;
            return true;
        }
        #endregion

        #region Public Methods
        public void PopulateDialog(ScreeningControl sender)
        {
            _control = sender;
            _screening = sender.Screening;
        }

        public void ToggleTicketsBought()
        {
            _screening.TicketsBought = !_screening.TicketsBought;
            UpdateAttendances();
        }

        public void ToggleSoldOut()
        {
            _screening.SoldOut = !_screening.SoldOut;
            UpdateAttendances();
        }

        public void ToggleMyAttandance()
        {
            _screening.ToggleMyAttendance();
            MyAttendanceTitler.SetTitle((TitledButton)_buttonIAttend, _screening.IAttend);
            UpdateAttendances();
        }

        public void ToggleFriendAttendance(string friend)
        {
            _screening.ToggleFriendAttendance(friend);
            UpdateAttendances();
        }
        #endregion

        #region Custom Actions
        partial void AcceptDialog(Foundation.NSObject sender)
        {
            RaiseDialogAccepted();
            CloseDialog();
        }

        partial void CancelDialog(Foundation.NSObject sender)
        {
            RaiseDialogCanceled();
            CloseDialog();
        }

        partial void IAttendScreening(NSObject sender)
        {
            RaiseAttendanceChanged();
            CloseDialog();
        }

        partial void ToggleTicketsBought(NSObject sender)
        {
            ToggleTicketsBought();
            _checkboxTicketsBought.State = ViewController.GetNSCellStateValue(_screening.TicketsBought);
        }

        partial void ToggleSoldOut(NSObject sender)
        {
            ToggleSoldOut();
            _checkboxSoldOut.State = ViewController.GetNSCellStateValue(_screening.SoldOut);
        }

        [Action("ToggleMyAttandance:")]
        void ToggleMyAttandance(NSObject sender)
        {
            ToggleMyAttandance();
            _checkboxIAttend.State = AttendanceCheckbox.SetAttendanceState(_screening.IAttend);
        }

        [Action("ToggleFriendAttendance:")]
        void ToggleFriendAttendance(NSObject sender)
        {
            string friend = ((NSMenuItem)sender).Title;
            ToggleFriendAttendance(friend);
            _attendanceCheckboxByFriend[friend].State = AttendanceCheckbox.SetAttendanceState(_screening.FriendAttends(friend));
        }

        [Action("NavigateFilmScreening:")]
        internal void NavigateFilmScreening(NSObject sender)
        {
            var screening = ScreeningMenuDelegate.FilmScreening(((NSMenuItem)sender).Title);
            GoToScreening(screening);
        }

        [Action("ShowFilmInfo:")]
        private void ShowFilmInfo(NSObject sender)
        {
            PerformSegue("ScreeningToFilmInfo", sender);
        }
        #endregion

        #region Events
        public EventHandler DialogAccepted;

        internal void RaiseDialogAccepted()
        {
            DialogAccepted?.Invoke(this, EventArgs.Empty);
        }

        public EventHandler DialogCanceled;

        internal void RaiseDialogCanceled()
        {
            DialogCanceled?.Invoke(this, EventArgs.Empty);
        }

        public EventHandler AttendanceChanged;

        internal void RaiseAttendanceChanged()
        {
            AttendanceChanged?.Invoke(this, EventArgs.Empty);
        }
        #endregion
    }
}
