// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using AppKit;
using CoreGraphics;
using Foundation;

namespace PresentScreenings.TableView
{
    /// <summary>
    /// Planner Dialog Controller, manages the user interface to automatically
    /// plan a festival program.
    /// </summary>

    public partial class PlannerDialogController : NSViewController
    {
        #region Private Constants
        private const float _xMargin = ControlsFactory.HorizontalMargin;
        private const float _xDistance = ControlsFactory.HorizontalPixelsBetweenControls;
        private const float _controlsWidth = ControlsFactory.StandardButtonWidth;
        private const float _controlsHeight = ControlsFactory.StandardButtonHeight;
        private const float _yXcodeControlsMargin = ControlsFactory.HorizontalMargin;
        #endregion

        #region Private Variables
        private ViewController _presentor;
        ScreeningsPlanner _planner;
        private nfloat _scrollViewWidth;
        private nfloat _scrollViewHeight;
        private nfloat _yScrollView = 2 * _yXcodeControlsMargin + _controlsHeight;
        private NSScrollView _filmsScrollView;
        private NSTextField _filmsDocumentView;
        private NSButton _planButton;
        private NSButton _unplanButton;
        private NSView _sampleView;
        #endregion

        #region Application Access
        private static AppDelegate _app => (AppDelegate)NSApplication.SharedApplication.Delegate;
        #endregion

        #region Properties
        public PlannerDialogController Presentor;
        #endregion

        #region Constructors
        public PlannerDialogController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Override Methods
        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate we're alive.
            _app.PlannerDialogController = this;

            // Initialize the presentor.
            _presentor = _app.Controller;

            // Inactivate screenings view actions.
            _presentor.RunningPopupsCount++;

            // Initialize.
            _planner = new ScreeningsPlanner(_presentor, DisplayResults);
            _scrollViewWidth = View.Frame.Width - 2 * _xMargin;
            _scrollViewHeight = View.Frame.Height - _yXcodeControlsMargin - _yScrollView;

            // Create the scroll view to display planning rewsults.
            CreateScrollView();

            // Create the action buttons at the bottom of the screen.
            CreateActionButtons();

            // Disable resizing.
            GoToScreeningDialog.DisableResizing(this, _sampleView);
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate we're gone.
            _app.PlannerDialogController = null;

            // Tell the main view controller we're gone.
            _presentor.RunningPopupsCount--;
        }
        #endregion

        #region Public Methods
        public void CloseDialog()
        {
            _presentor.DismissViewController(this);
        }
        #endregion

        #region Private Methods
        private void CreateScrollView()
        {
            // Create the document view displaying information on unplanned films.
            var docRect = new CGRect(0, 0, _scrollViewWidth, _scrollViewHeight);
            _filmsDocumentView = ControlsFactory.NewStandardLabel(docRect, true);
            _filmsDocumentView.StringValue = InstructionsString();

            // Create the scroll view.
            var scrollViewFrame = new CGRect(_xMargin, _yScrollView, _scrollViewWidth, _scrollViewHeight);
            _filmsScrollView = ControlsFactory.NewStandardScrollView(scrollViewFrame, _filmsDocumentView, true);
            View.AddSubview(_filmsScrollView);

            // Scroll to the instruction text.
            var yScroll = _filmsDocumentView.Frame.Height - _filmsScrollView.Frame.Height;
            _filmsScrollView.ContentView.ScrollToPoint(new CGPoint(0, yScroll));

            // Set sample view used to disable resizing.
            _sampleView = _filmsScrollView;
        }

        private void CreateActionButtons()
        {
            var xCurr = View.Frame.Width;

            // Create the Plan button.
            xCurr -= _xMargin + _controlsWidth;
            _planButton = ControlsFactory.NewStandardButton(new CGRect(xCurr, _yXcodeControlsMargin, _controlsWidth, _controlsHeight));
            _planButton.Title = "Plan";
            _planButton.Enabled = true;
            _planButton.KeyEquivalent = ControlsFactory.EnterKey;
            _planButton.Action = new ObjCRuntime.Selector("PlanScreenings:");
            View.AddSubview(_planButton);

            // Create the Undo Planning button.
            xCurr -= _xDistance + _controlsWidth;
            _unplanButton = ControlsFactory.NewStandardButton(new CGRect(xCurr, _yXcodeControlsMargin, _controlsWidth, _controlsHeight));
            _unplanButton.Title = "Unplan";
            _unplanButton.Enabled = ScreeningsPlan.Screenings.Count(s => s.AutomaticallyPlanned) >= 1;
            _unplanButton.Action = new ObjCRuntime.Selector("UnplanScreenings:");
            View.AddSubview(_unplanButton);

            // Create the Close button.
            xCurr -= _xDistance + _controlsWidth;
            var doneButton = ControlsFactory.NewCancelButton(new CGRect(xCurr, _yXcodeControlsMargin, _controlsWidth, _controlsHeight));
            doneButton.Title = "Close";
            doneButton.Action = new ObjCRuntime.Selector("ClosePlanView:");
            View.AddSubview(doneButton);
        }

        private string InstructionsString()
        {
            return $"Hit the Plan button to start automatic planning.{Environment.NewLine}"
                + $"Ratings {FilmRating.MaxRating} down to {FilmRating.LowestSuperRating} are considered.";
        }

        private void DisplayResults(string resultText)
        {
            _filmsDocumentView.StringValue = resultText;
            var fit = _filmsDocumentView.SizeThatFits(_filmsDocumentView.Frame.Size);
            _filmsDocumentView.SetFrameSize(fit);
            var yScroll = _filmsDocumentView.Frame.Height - _filmsScrollView.Frame.Height;
            _filmsScrollView.ContentView.ScrollToPoint(new CGPoint(0, yScroll));
        }
        #endregion

        #region Custom Actions
        [Action("PlanScreenings:")]
        private void PlanScreenings(NSObject sender)
        {
            _planButton.Enabled = false;
            _planner.MakeScreeningsPlan(ScreeningInfo.Me);
            _unplanButton.Enabled = true;
        }

        [Action("UnplanScreenings:")]
        private void UnplanScreenings(NSObject sender)
        {
            _unplanButton.Enabled = false;
            _planner.UndoScreeningsPlan(ScreeningInfo.Me);
            _planButton.Enabled = true;
        }

        [Action("ClosePlanView:")]
        private void ClosePlanView(NSObject sender)
        {
            CloseDialog();
        }
        #endregion
    }
}
