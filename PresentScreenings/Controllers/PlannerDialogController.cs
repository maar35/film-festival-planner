// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using CoreGraphics;
using Foundation;

namespace PresentScreenings.TableView
{
    public partial class PlannerDialogController : NSViewController
	{
        #region Private Constants
        private const float _xMargin = ControlsFactory.HorizontalMargin;
        private const float _xDistance = ControlsFactory.HorizontalPixelsBetweenControls;
        private const float _controlsWidth = ControlsFactory.StandardButtonWidth;
        private const float _controlsHeight = ControlsFactory.StandardLabelHeight;
        private const float _yXcodeControlsMargin = 20;
        #endregion

        #region Private Variables
        private ViewController _presentor;
        private float _scrollViewWidth;
        private NSScrollView _filmsScrollView;
        private NSTextField _filmsDocumentView;
        #endregion

        #region Application Access
        private static AppDelegate _app => (AppDelegate)NSApplication.SharedApplication.Delegate;
        #endregion

        #region Properties
        public PlannerDialogController Presentor;
        #endregion

        #region Constructors
        public PlannerDialogController (IntPtr handle) : base (handle)
		{
		}
        #endregion

        #region Override Methods
        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate we're alive.
            _app.PlannerDialogController = this;

            // Initialize.
            _presentor = _app.Controller;
            _scrollViewWidth = (float)(View.Frame.Width - 2 * _xMargin);

            // Create the scroll view to display planning rewsults.
            CreateScrollView();

            // Create the action buttons at the bottom of the screen.
            CreateActionButtons();

            // Set constraints of the in-code generated UI elements.
            //SetConstraints();
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate we're gone.
            _app.PlannerDialogController = null;
        }
        #endregion

        #region Public Methods
        public void CloseDialog()
        {
            _presentor.DismissViewController(this);
        }
        #endregion

        #region Private Methods
        private void CreateScrollView()
        {
            // Create the document view displaying information on unplanned films.
            nfloat filmsViewWidth = _scrollViewWidth;
            nfloat filmsViewHeight = View.Frame.Height;
            var docRect = new CGRect(0, 0, filmsViewWidth, filmsViewHeight);
            _filmsDocumentView = ControlsFactory.NewStandardLabel(docRect);
            _filmsDocumentView.StringValue = InstructionsString();
            var fit = _filmsDocumentView.SizeThatFits(_filmsDocumentView.Frame.Size);
            _filmsDocumentView.SetFrameSize(fit);

            // Create the scroll view.
            nfloat yScrollView = 2 * _yXcodeControlsMargin + _controlsHeight;
            nfloat scrollViewHeight = View.Frame.Height - _yXcodeControlsMargin - yScrollView;
            CGRect scrollViewFrame = new CGRect(_xMargin, yScrollView, _scrollViewWidth, scrollViewHeight);
            _filmsScrollView = ControlsFactory.NewStandardScrollView(scrollViewFrame, _filmsDocumentView);
            View.AddSubview(_filmsScrollView);
        }

        private void CreateActionButtons()
        {
            var xCurr = View.Frame.Width;

            // Create the Plan Button.
            xCurr -= _xMargin + _controlsWidth;
            var planButtonFrame = new CGRect(xCurr, _yXcodeControlsMargin, _controlsWidth, _controlsHeight);
            NSButton planButton = ControlsFactory.NewStandardButton(planButtonFrame);
            planButton.Title = "Plan";
            planButton.KeyEquivalent = ControlsFactory.EnterKey;
            planButton.Action = new ObjCRuntime.Selector("PlanScreenings:");
            View.AddSubview(planButton);

            // Create the Done button.
            xCurr -= _xDistance + _controlsWidth;
            var doneButtonFrame = new CGRect(xCurr, _yXcodeControlsMargin, _controlsWidth, _controlsHeight);
            var doneButton = ControlsFactory.NewCancelButton(doneButtonFrame);
            doneButton.Title = "Done";
            doneButton.Action = new ObjCRuntime.Selector("ClosePlanView:");
            View.AddSubview(doneButton);
        }

        private string InstructionsString()
        {
            return string.Format("Hit the Plan button to start automatic planning.\nRatings {0} down to {1} are considered.", FilmRating.MaxRating, FilmRating.LowestSuperRating);
        }

        private void DisplayResults(string resultText)
        {
            _filmsDocumentView.StringValue = resultText;
            var fit = _filmsDocumentView.SizeThatFits(_filmsDocumentView.Frame.Size);
            _filmsDocumentView.SetFrameSize(fit);
            var yScroll = _filmsDocumentView.Frame.Height - _filmsScrollView.Frame.Height;
            _filmsScrollView.ContentView.ScrollToPoint(new CGPoint(0, yScroll));
        }
        #endregion

        #region Custom Actions
        [Action("PlanScreenings:")]
        private void PlanScreenings(NSObject sender)
        {
            var planner = new ScreeningsPlanner(_presentor, DisplayResults);
            planner.MakeScreeningsPlan(ScreeningInfo.Me);
        }

        [Action("ClosePlanView:")]
        private void ClosePlanView(NSObject sender)
        {
            CloseDialog();
        }
        #endregion
    }
}
