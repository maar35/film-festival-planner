// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using AppKit;
using CoreGraphics;
using Foundation;
using System.Text;
using System.Net;

namespace PresentScreenings.TableView
{
    /// <summary>
    /// Film info sheet controller, present a list of screenings of one film, with
    /// a button to display a Screening Info Modal in the day view of the
    /// screening.
    /// </summary>

    public partial class FilmInfoSheetController : NSViewController
    {
        #region Constants
        const float _xMargin = ControlsFactory.HorizontalMargin;
        const float _yMargin = ControlsFactory.BigVerticalMargin;
        const float _yBetweenViews = ControlsFactory.VerticalPixelsBetweenViews;
        const float _yBetweenLabels = ControlsFactory.VerticalPixelsBetweenLabels;
        const float _labelHeight = ControlsFactory.StandardLabelHeight;
        const float _buttonWidth = ControlsFactory.StandardButtonWidth;
        const float _buttonHeight = ControlsFactory.StandardButtonHeight;
        const float _summaryBoxHeight = 300;
        #endregion

        #region Private Variables
        float _contentWidth;
        float _yCurr;
        Film _film;
        FilmInfo _filmInfo;
        CGRect _dialogFrame;
        NSTextField _summaryField;
        NSScrollView _summaryScrollView;
        NSButton _linkButton;
        NSButton _cancelButton;
        #endregion

        #region Application Access
        public static AppDelegate App => (AppDelegate)NSApplication.SharedApplication.Delegate;
        #endregion

        #region Properties
        public SelfDestructableDialog Presentor;
        public bool ShowScreenings = true;
        #endregion

        #region Constructors
        public FilmInfoSheetController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Override Methods
        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Tell the app delegate that we're alive.
            App.filmInfoController = this;

            // Get the selected film.
            _film = ((IScreeningProvider)Presentor).CurrentFilm;

            // Get the downloaded film info if present.
            _filmInfo = FilmRatingDialogController.GetFilmInfo(_film.FilmId);

            // Get the dialog frame.
            _dialogFrame = View.Frame;
            _yCurr = (float)_dialogFrame.Height;
            _contentWidth = (float)_dialogFrame.Width - 2 * _xMargin;

            // Cretae the film title label.
            _yCurr -= _yMargin;
            CreateFilmTitleLabel(ref _yCurr);

            // Create the film article link.
            _yCurr -= _yBetweenViews;
            CreateFilmArticleLink(ref _yCurr);

            // Create the film summary box.
            _yCurr -= _yBetweenViews;
            CreateFilmSummaryBox(ref _yCurr);

            // Create the screenings scroll view.
            if (ShowScreenings)
            {
                _yCurr -= _yBetweenViews;
                CreateScreeningsScrollView(ref _yCurr);
            }

            // Create the cancel button.
            _yCurr = _yMargin + _buttonHeight + _yBetweenViews;   // temp
            _yCurr -= _yBetweenViews;
            CreateCancelButton(ref _yCurr);
        }

        public override void ViewWillDisappear()
        {
            base.ViewWillDisappear();

            // Tell the app delegate that we're gone.
            App.filmInfoController = null;
        }
        #endregion

        #region Private Methods
        void CreateFilmTitleLabel(ref float yCurr)
        {
            yCurr -= _labelHeight;
            var rect = new CGRect(_xMargin, yCurr, _contentWidth, _labelHeight);
            var filmTitleLabel = ControlsFactory.CreateStandardLabel(rect);
            filmTitleLabel.StringValue = _film.Title;
            filmTitleLabel.Font = NSFont.BoldSystemFontOfSize(NSFont.SystemFontSize);
            View.AddSubview(filmTitleLabel);
        }

        void CreateScreeningsScrollView(ref float yCurr)
        {
            // Get the screenings of the selected film.
            var screenings = ViewController.FilmScreenings(_film.FilmId);

            // Create the screenings view.
            var xScreenings = screenings.Count * (_labelHeight + _yBetweenLabels);
            var screeningsViewFrame = new CGRect(0, 0, _contentWidth, xScreenings);
            var screeningsView = new NSView(screeningsViewFrame);

            // Create the scroll view.
            var scrollViewHeight = yCurr - _yBetweenViews - _buttonHeight - _yMargin;
            yCurr -= (float)scrollViewHeight;
            var scrollViewFrame = new CGRect(_xMargin, yCurr, _contentWidth, scrollViewHeight);
            var scrollView = ControlsFactory.CreateStandardScrollView(scrollViewFrame, screeningsView);
            View.AddSubview(scrollView);

            // Display the screenings.
            DisplayScreeningControls(screenings, screeningsView);
        }

        void DisplayScreeningControls(List<Screening> screenings, NSView screeningsView)
        {
            var yScreening = screeningsView.Frame.Height;
            foreach (var screening in screenings)
            {
                float xScreening = 0;
                yScreening -= _labelHeight;

                // Create the screening info button.
                var buttonRect = new CGRect(xScreening, yScreening, 20, _labelHeight);
                var infoButton = new FilmScreeningControl(buttonRect, screening);
                infoButton.ScreeningInfoAsked += (sender, e) => GoToScreening(screening);
                screeningsView.AddSubview(infoButton);
                xScreening += 22;

                // Create the screening label.
                var labelRect = new CGRect(xScreening, yScreening, _contentWidth - xScreening, _labelHeight);
                var screeningLabel = ControlsFactory.CreateStandardLabel(labelRect);
                screeningLabel.StringValue = screening.ToFilmScreeningLabelString();
                ColorView.SetScreeningColor(screening, screeningLabel);
                screeningsView.AddSubview(screeningLabel);

                yScreening -= _yBetweenLabels;
            }
        }

        void CreateFilmArticleLink(ref float yCurr)
        {
            yCurr -= _buttonHeight;
            var rect = new CGRect(_xMargin, yCurr, _contentWidth, _buttonHeight);
            _linkButton = new NSButton(rect);
            _linkButton.BezelStyle = NSBezelStyle.Rounded;
            _linkButton.SetButtonType(NSButtonType.MomentaryPushIn);
            _linkButton.LineBreakMode = NSLineBreakMode.TruncatingMiddle;
            if (_filmInfo == null)
            {
                _linkButton.Title = WebUtility.UrlString(_film.Title, WebUtility.MediumCatagory.Films);
            }
            else
            {
                _linkButton.Title = _filmInfo.Url;
                _linkButton.Enabled = false;
            }
            _linkButton.Tag = _film.FilmId;
            _linkButton.Action = new ObjCRuntime.Selector("VisitUrl:");

            //NSMutableAttributedString attrStr = new NSMutableAttributedString("Alpha Go hyperlink");
            //var range = new NSRange(8, 9); // Range for "hyperlink" word
            //var url = new NSUrl("https://IFFR.com/nl/2018/films/alpha-go");
            //label.AccessibilityUrl = url;
            //var font = label.Font; // _myLablel is an instance of NSClickableURLTextField class
            //// We have to setup paragraph if we want to keep original alignment and line break node
            //var paragraph = new NSMutableParagraphStyle();
            //paragraph.LineBreakMode = label.Cell.LineBreakMode;
            //paragraph.Alignment = label.Alignment;
            //attrStr.BeginEditing();
            ////attrStr.AddAttribute(NSAttributedString.CreateWithHTML(url, range);
            //attrStr.AddAttribute((NSString)"color", NSColor.Blue, range);
            ////attrStr.AddAttribute(NSAttributedString.UnderlineStyleAttributeName, new NSNumber(1), range);
            ////attrStr.AddAttribute(NSAttributedString.FontAttributeName, font, new NSRange(0, attrStr.Length)); // Set font for entire string
            ////attrStr.AddAttribute(NSAttributedString.ParagraphStyleAttributeName, paragraph, new NSRange(0, attrStr.Length)); // Optional
            //attrStr.EndEditing();
            //label.AttributedStringValue = attrStr;

            View.AddSubview(_linkButton);
        }

        void CreateFilmSummaryBox(ref float yCurr)
        {
            float summaryBoxHeight = ShowScreenings ? _summaryBoxHeight : yCurr - _yBetweenViews - _buttonHeight - _yMargin;
            var docRect = new CGRect(0, 0, _contentWidth, _summaryBoxHeight);
            _summaryField = new NSTextField(docRect);
            _summaryField.Editable = true;
            _summaryField.StringValue = _filmInfo != null ? _filmInfo.ToString() : SampleText();
            var fit = _summaryField.SizeThatFits(_summaryField.Frame.Size);
            _summaryField.SetFrameSize(fit);

            yCurr -= summaryBoxHeight;
            var rect = new CGRect(_xMargin, yCurr, _contentWidth, summaryBoxHeight);
            _summaryScrollView = ControlsFactory.CreateStandardScrollView(rect, _summaryField);
            _summaryScrollView.ContentView.ScrollToPoint(new CGPoint(0, 0));
            View.AddSubview(_summaryScrollView);
        }

        void CreateCancelButton(ref float yCurr)
        {
            yCurr -= _buttonHeight;
            var cancelButtonRect = new CGRect(_xMargin, yCurr, _buttonWidth, _buttonHeight);
            _cancelButton = ControlsFactory.CreateCancelButton(cancelButtonRect);
            _cancelButton.Action = new ObjCRuntime.Selector("CancelGotoScreening:");
            View.AddSubview(_cancelButton);
        }

        string SampleText()
        {
            var builder = new StringBuilder();
            foreach (Film film in App.Controller.Plan.Films)
            {
                builder.AppendLine(film.ToString());
            }
            return builder.ToString();
        }

        void VisitUrl()
        {
            string summary = "";
            var title = _film.Title;
            FilmInfo filmInfo;
            foreach (var catagory in WebUtility.FolderByCatagory.Keys)
            {
                var url = WebUtility.UrlString(title, catagory);
                _summaryField.StringValue = url;
                _summaryScrollView.BackgroundColor = NSColor.WindowBackground;
                var request = WebRequest.Create(url) as HttpWebRequest;
                try
                {
                    filmInfo = WebUtility.TryParseUrlSummary(request, url, catagory, _film.FilmId);
                    if (filmInfo != null)
                    {
                        _filmInfo = filmInfo;
                        _film.InfoStatus = Film.FilmInfoStatus.Complete;
                        summary = filmInfo.ToString();
                        FilmRatingDialogController.AddFilmInfo(filmInfo);
                        _linkButton.Title = url;
                        _cancelButton.Title = "Done";
                    }
                    break;
                }
                catch (UnparseblePageException ex)
                {
                    _film.InfoStatus = Film.FilmInfoStatus.ParseError;
                    _summaryScrollView.BackgroundColor = NSColor.SystemYellowColor;
                    summary = ex.Message;
                    break;
                }
                catch (WebException ex)
                {
                    _film.InfoStatus = Film.FilmInfoStatus.UrlError;
                    _summaryScrollView.BackgroundColor = NSColor.SystemPinkColor;
                    summary = $"Web exception in {url}\n\n" + ex.ToString();
                }
                finally
                {
                    _summaryField.StringValue = summary;
                    var fit = _summaryField.SizeThatFits(_summaryField.Frame.Size);
                    _summaryField.SetFrameSize(fit);
                }
            }
        }

        void GoToScreening(Screening screening)
        {
            Presentor.GoToScreening(screening);
        }

        void ClosePopOver()
        {
            Presentor.DismissViewController(this);
        }
        #endregion

        #region Custom Actions
        [Action("CancelGotoScreening:")]
        void CancelGotoScreening(NSObject sender)
        {
            ClosePopOver();
        }

        [Action("VisitUrl:")]
        void VisitUrl(NSObject sender)
        {
            VisitUrl();
        }
        #endregion
    }
}
